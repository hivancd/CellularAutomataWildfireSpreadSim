[gd_scene load_steps=16 format=3 uid="uid://cp4pyravsv5lt"]

[ext_resource type="Script" path="res://addons/cellular_automata_studio/cellular_automata_studio_2d.gd" id="1_g2lpm"]
[ext_resource type="Script" path="res://examples/stand_alone.gd" id="1_k7f4v"]
[ext_resource type="Script" path="res://addons/cellular_automata_studio/string_color.gd" id="2_6c80k"]
[ext_resource type="Texture2D" uid="uid://bwgxhmdwejss6" path="res://wind_indicator.png" id="2_ht7h5"]

[sub_resource type="CodeHighlighter" id="CodeHighlighter_diay8"]
number_color = Color(1, 1, 0.501961, 1)
symbol_color = Color(1, 0.501961, 1, 1)
function_color = Color(0.501961, 1, 1, 1)
member_variable_color = Color(1, 0.501961, 0.501961, 1)

[sub_resource type="CodeHighlighter" id="CodeHighlighter_1sujs"]
number_color = Color(1, 1, 0, 1)
symbol_color = Color(1, 0, 1, 1)
function_color = Color(0, 1, 1, 1)
member_variable_color = Color(1, 0.501961, 0.501961, 1)

[sub_resource type="CodeHighlighter" id="CodeHighlighter_8t2bd"]
number_color = Color(1, 1, 0, 1)
symbol_color = Color(1, 0, 1, 1)
function_color = Color(0, 1, 1, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_wghjs"]
noise_type = 0
seed = 1
frequency = 0.6163

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_0uf6p"]
noise = SubResource("FastNoiseLite_wghjs")

[sub_resource type="Resource" id="Resource_hwxnk"]
script = ExtResource("2_6c80k")
text = "fire"
color = Color(0.943965, 0.608288, 1.92523e-06, 1)

[sub_resource type="Resource" id="Resource_l3xlw"]
script = ExtResource("2_6c80k")
text = "ground"
color = Color(0.655483, 0.422915, 0.16618, 1)

[sub_resource type="Resource" id="Resource_skgpx"]
script = ExtResource("2_6c80k")
text = "water"
color = Color(9.43363e-06, 0.654528, 0.880101, 1)

[sub_resource type="Resource" id="Resource_gmqwc"]
script = ExtResource("2_6c80k")
text = "forest"
color = Color(0.0980392, 0.368627, 0, 1)

[sub_resource type="Resource" id="Resource_wcrw8"]
script = ExtResource("2_6c80k")
text = "grass"
color = Color(0.392157, 0.596078, 0, 1)

[sub_resource type="Resource" id="Resource_eltdg"]
script = ExtResource("2_6c80k")
text = "ashes"
color = Color(0.0807833, 0.0807833, 0.0807833, 1)

[node name="VBoxMain" type="VBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 2.0
offset_right = 2.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3
script = ExtResource("1_k7f4v")

[node name="HBoxToolbar" type="HBoxContainer" parent="."]
custom_minimum_size = Vector2(48, 48)
layout_mode = 2

[node name="HBoxContainer" type="HBoxContainer" parent="HBoxToolbar"]
layout_mode = 2
size_flags_horizontal = 3

[node name="OptionButton" type="OptionButton" parent="HBoxToolbar/HBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 18
item_count = 4
selected = 3
popup/item_0/text = "Blank grid"
popup/item_0/id = 0
popup/item_1/text = "Random grid"
popup/item_1/id = 1
popup/item_2/text = "Procedural"
popup/item_2/id = 2
popup/item_3/text = "Custom"
popup/item_3/id = 3

[node name="ButtonCompile" type="Button" parent="HBoxToolbar/HBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 18
text = "Compile"

[node name="ButtonStep" type="Button" parent="HBoxToolbar/HBoxContainer"]
custom_minimum_size = Vector2(48, 48)
layout_mode = 2
tooltip_text = "Execute one step of your code"
theme_override_font_sizes/font_size = 18
text = "> / ll"

[node name="ButtonExec" type="Button" parent="HBoxToolbar/HBoxContainer"]
custom_minimum_size = Vector2(48, 48)
layout_mode = 2
tooltip_text = "Execute your code"
theme_override_font_sizes/font_size = 18
text = ">> / ll"

[node name="Sprite2D" type="Sprite2D" parent="HBoxToolbar"]
position = Vector2(503, 26)
scale = Vector2(1.03125, 1.08538)
texture = ExtResource("2_ht7h5")

[node name="Label" type="Label" parent="HBoxToolbar"]
layout_mode = 2
text = "WIND"

[node name="VBoxContainer" type="VBoxContainer" parent="HBoxToolbar"]
layout_mode = 2

[node name="HBoxContainer" type="HBoxContainer" parent="HBoxToolbar/VBoxContainer"]
layout_mode = 2

[node name="Label" type="Label" parent="HBoxToolbar/VBoxContainer/HBoxContainer"]
layout_mode = 2
text = "angle"

[node name="WindAngle" type="HSlider" parent="HBoxToolbar/VBoxContainer/HBoxContainer"]
custom_minimum_size = Vector2(180, 23)
layout_mode = 2
max_value = 6.283
step = 0.001
tick_count = 9
ticks_on_borders = true

[node name="AngleValue" type="Label" parent="HBoxToolbar/VBoxContainer/HBoxContainer"]
custom_minimum_size = Vector2(80, 0)
layout_mode = 2
text = "0 deg"

[node name="HBoxContainer2" type="HBoxContainer" parent="HBoxToolbar/VBoxContainer"]
layout_mode = 2

[node name="Label" type="Label" parent="HBoxToolbar/VBoxContainer/HBoxContainer2"]
layout_mode = 2
text = "speed"

[node name="WindSpeed" type="HSlider" parent="HBoxToolbar/VBoxContainer/HBoxContainer2"]
custom_minimum_size = Vector2(180, 23)
layout_mode = 2
max_value = 31.0
step = 0.1
tick_count = 11
ticks_on_borders = true

[node name="SpeedValue" type="Label" parent="HBoxToolbar/VBoxContainer/HBoxContainer2"]
custom_minimum_size = Vector2(80, 0)
layout_mode = 2
text = "0 mph"

[node name="LabelTitle" type="Label" parent="HBoxToolbar"]
layout_mode = 2
theme_override_font_sizes/font_size = 18
text = " CA Studio (standalone v1.0) "

[node name="VSplitContainer" type="VSplitContainer" parent="."]
layout_mode = 2
size_flags_vertical = 3

[node name="StandAlone" type="HSplitContainer" parent="VSplitContainer"]
layout_mode = 2
size_flags_vertical = 3

[node name="TabContainer" type="TabContainer" parent="VSplitContainer/StandAlone"]
custom_minimum_size = Vector2(384, 0)
layout_mode = 2

[node name="INIT" type="TextEdit" parent="VSplitContainer/StandAlone/TabContainer"]
custom_minimum_size = Vector2(640, 256)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
theme_override_font_sizes/font_size = 18
text = "if (present_state==1)
	future_state=ground; 
if (present_state==2)
	future_state=water;
if (present_state==3){
	future_state=forest;
	data_values[p] = forest_dur;}
if (present_state==4 || present_state==5){
	future_state=grass;
	data_values[p] = grass_dur;}
if (x>=0 && x<=0+5)
	future_state=ashes;
if (y>=0 && y<=0+5)
	future_state=ashes;
if (x<=WSX && x>=WSX-5)
	future_state=ashes;
if (y<=WSY && y>=WSY-5)
	future_state=ashes;"
placeholder_text = "// INITIALISATION CODE (step = 0)
// You will use the following variables:
//    uint WSX, WSY (global WorkSpace in X and Y)
//    uint x,y,p (cell position)
//    int present_state (cell state. An integer random value from int.MIN and int.MAX)
//    int future_state (the new cell state)"
syntax_highlighter = SubResource("CodeHighlighter_diay8")

[node name="EXEC" type="TextEdit" parent="VSplitContainer/StandAlone/TabContainer"]
visible = false
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
size_flags_stretch_ratio = 2.0
theme_override_font_sizes/font_size = 18
text = "if (present_state==fire){
	if (fire_tmp(data_values[p])<=0)
		future_state=ashes;
	else
		data_values[p]+=0.083;
}
if (present_state==grass||present_state==forest){
	if (data_values[p]<=0)
		future_state=fire;
	else
		data_values[p] -= temperature(x, y, 3);
}

if (x==sfx && y==sfy){
	future_state=fire;
	data_values[p]=float(0);}"
placeholder_text = "// EXECUTION CODE (step >= 1)
// You will use the following variables:
//    uint WSX, WSY (global WorkSpace in X and Y)
//    uint x,y,p (cell position)
//    int present_state (current cell state. Do not modify)
//    int future_state (the new cell state)"
scroll_vertical = 16.0
syntax_highlighter = SubResource("CodeHighlighter_1sujs")

[node name="FUNC" type="TextEdit" parent="VSplitContainer/StandAlone/TabContainer"]
visible = false
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
size_flags_stretch_ratio = 2.0
theme_override_font_sizes/font_size = 18
text = "float grass_dur = 31.0;
float forest_dur = 45.0;
vec2 wind = vec2(cos(wind_angle), -sin(wind_angle));

float fire_tmp(float val){
return exp(-(val-0.7)*(val-0.7));
}

float temperature(uint x,uint y, int k) {
	float temp = 0.0;
	uint p = x + y * WSX;
	for(int i = int(x)-k; i <= int(x)+k; i++) {
		uint ii = uint((i+int(WSX))) % WSX;
		for(int j = int(y)-k; j <= int(y)+k; j++) {
			uint jj = uint((j+int(WSY))) % WSY;
			uint kk = ii + jj * WSX;
			if(data_present[kk] == fire){
				vec2 posit = vec2(float(x)-float(i), float(y)-float(j));
				float cosine = dot(wind, posit)/sqrt(dot(posit, posit));
				float rel_temp = fire_tmp(data_values[kk]);
				temp+= rel_temp*exp(0.1783*wind_speed*cosine);
				}
			if(data_present[kk] == water){
				vec2 posit = vec2(float(x)-float(i), float(y)-float(j));
				temp*= sqrt(dot(posit, posit))/(13*sqrt(2));
				}
		}
	}
	return temp;
}"
placeholder_text = "// FUNCTIONS CODE
// Write all your functions here in GLSL
// You can use the following global variables:
//    uint WSX, WSY : global WorkSpace in X and Y
// Example
// int your_function(int x, int y) {
//    if (x == WSX/2 && y == WSY/2)
//       return my_state_1;
//    else
//       return my_state_2;
// }
"
scroll_vertical = 30.0
syntax_highlighter = SubResource("CodeHighlighter_8t2bd")

[node name="VBoxCode" type="VBoxContainer" parent="VSplitContainer/StandAlone"]
visible = false
layout_mode = 2
size_flags_horizontal = 3

[node name="TextureRect" type="TextureRect" parent="VSplitContainer/StandAlone"]
custom_minimum_size = Vector2(256, 256)
layout_mode = 2
size_flags_horizontal = 3
texture = SubResource("NoiseTexture2D_0uf6p")
expand_mode = 1

[node name="TextEdit" type="TextEdit" parent="VSplitContainer"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2
editable = false

[node name="LabelErrors" type="RichTextLabel" parent="VSplitContainer"]
visible = false
clip_contents = false
custom_minimum_size = Vector2(0, 80)
layout_mode = 2
theme_override_font_sizes/normal_font_size = 18
theme_override_font_sizes/bold_font_size = 18
theme_override_font_sizes/italics_font_size = 18
theme_override_font_sizes/bold_italics_font_size = 18
theme_override_font_sizes/mono_font_size = 18
text = "Output :

"

[node name="CellularAutomata2D" type="Node" parent="." node_paths=PackedStringArray("display_in")]
script = ExtResource("1_g2lpm")
WSX = 256
WSY = 256
display_in = NodePath("../VSplitContainer/StandAlone/TextureRect")
cell_states = Array[Object]([SubResource("Resource_hwxnk"), SubResource("Resource_l3xlw"), SubResource("Resource_skgpx"), SubResource("Resource_gmqwc"), SubResource("Resource_wcrw8"), SubResource("Resource_eltdg")])
init_code = "
// INITIALISATION CODE (step = 0)
// You can use the following variables:
//    uint WSX, WSY (global WorkSpace in X and Y)
//    uint x,y,p (cell position)
//    int present_state (cell state. An integer random value from int.MIN and int.MAX)
//    int future_state (the new cell state)
"
exec_code = "
// EXECUTION CODE (step >= 1)
// You can use the following variables:
//    uint WSX, WSY (global WorkSpace in X and Y)
//    uint x,y,p (cell position)
//    int present_state (current cell state. Do not modify)
//    int future_state (the new cell state)
"

[connection signal="pressed" from="HBoxToolbar/HBoxContainer/ButtonCompile" to="." method="_on_button_compile_pressed"]
[connection signal="pressed" from="HBoxToolbar/HBoxContainer/ButtonStep" to="CellularAutomata2D" method="_on_button_step"]
[connection signal="pressed" from="HBoxToolbar/HBoxContainer/ButtonExec" to="CellularAutomata2D" method="_on_button_play"]
[connection signal="value_changed" from="HBoxToolbar/VBoxContainer/HBoxContainer/WindAngle" to="." method="_on_h_slider_value_changed"]
[connection signal="value_changed" from="HBoxToolbar/VBoxContainer/HBoxContainer2/WindSpeed" to="." method="_on_wind_speed_value_changed"]
[connection signal="gui_input" from="VSplitContainer/StandAlone/TextureRect" to="." method="_on_texture_rect_gui_input"]
[connection signal="mouse_entered" from="VSplitContainer/StandAlone/TextureRect" to="." method="_on_texture_rect_mouse_entered"]
[connection signal="mouse_exited" from="VSplitContainer/StandAlone/TextureRect" to="." method="_on_texture_rect_mouse_exited"]
